// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: telemetry.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TelemetryEvent_DataType int32

const (
	TelemetryEvent_ULTRASONIC_ARRAY TelemetryEvent_DataType = 0
	TelemetryEvent_ULTRASONIC       TelemetryEvent_DataType = 1
	TelemetryEvent_INFRARED_ARRAY   TelemetryEvent_DataType = 2
	TelemetryEvent_INFRARED         TelemetryEvent_DataType = 3
	TelemetryEvent_IMU              TelemetryEvent_DataType = 4
	TelemetryEvent_ENCODER          TelemetryEvent_DataType = 5
)

// Enum value maps for TelemetryEvent_DataType.
var (
	TelemetryEvent_DataType_name = map[int32]string{
		0: "ULTRASONIC_ARRAY",
		1: "ULTRASONIC",
		2: "INFRARED_ARRAY",
		3: "INFRARED",
		4: "IMU",
		5: "ENCODER",
	}
	TelemetryEvent_DataType_value = map[string]int32{
		"ULTRASONIC_ARRAY": 0,
		"ULTRASONIC":       1,
		"INFRARED_ARRAY":   2,
		"INFRARED":         3,
		"IMU":              4,
		"ENCODER":          5,
	}
)

func (x TelemetryEvent_DataType) Enum() *TelemetryEvent_DataType {
	p := new(TelemetryEvent_DataType)
	*p = x
	return p
}

func (x TelemetryEvent_DataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TelemetryEvent_DataType) Descriptor() protoreflect.EnumDescriptor {
	return file_telemetry_proto_enumTypes[0].Descriptor()
}

func (TelemetryEvent_DataType) Type() protoreflect.EnumType {
	return &file_telemetry_proto_enumTypes[0]
}

func (x TelemetryEvent_DataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TelemetryEvent_DataType.Descriptor instead.
func (TelemetryEvent_DataType) EnumDescriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{0, 0}
}

// Use NONE for IMU and Encoder
type TelemetryEvent_Orientation int32

const (
	TelemetryEvent_FRONT TelemetryEvent_Orientation = 0
	TelemetryEvent_SIDE  TelemetryEvent_Orientation = 1
	TelemetryEvent_NONE  TelemetryEvent_Orientation = 2
)

// Enum value maps for TelemetryEvent_Orientation.
var (
	TelemetryEvent_Orientation_name = map[int32]string{
		0: "FRONT",
		1: "SIDE",
		2: "NONE",
	}
	TelemetryEvent_Orientation_value = map[string]int32{
		"FRONT": 0,
		"SIDE":  1,
		"NONE":  2,
	}
)

func (x TelemetryEvent_Orientation) Enum() *TelemetryEvent_Orientation {
	p := new(TelemetryEvent_Orientation)
	*p = x
	return p
}

func (x TelemetryEvent_Orientation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TelemetryEvent_Orientation) Descriptor() protoreflect.EnumDescriptor {
	return file_telemetry_proto_enumTypes[1].Descriptor()
}

func (TelemetryEvent_Orientation) Type() protoreflect.EnumType {
	return &file_telemetry_proto_enumTypes[1]
}

func (x TelemetryEvent_Orientation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TelemetryEvent_Orientation.Descriptor instead.
func (TelemetryEvent_Orientation) EnumDescriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{0, 1}
}

type TelemetryEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp   int32                      `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Data        float32                    `protobuf:"fixed32,2,opt,name=data,proto3" json:"data,omitempty"`
	DataType    TelemetryEvent_DataType    `protobuf:"varint,3,opt,name=data_type,json=dataType,proto3,enum=pb.TelemetryEvent_DataType" json:"data_type,omitempty"`
	Orientation TelemetryEvent_Orientation `protobuf:"varint,4,opt,name=orientation,proto3,enum=pb.TelemetryEvent_Orientation" json:"orientation,omitempty"`
}

func (x *TelemetryEvent) Reset() {
	*x = TelemetryEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetryEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryEvent) ProtoMessage() {}

func (x *TelemetryEvent) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryEvent.ProtoReflect.Descriptor instead.
func (*TelemetryEvent) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{0}
}

func (x *TelemetryEvent) GetTimestamp() int32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *TelemetryEvent) GetData() float32 {
	if x != nil {
		return x.Data
	}
	return 0
}

func (x *TelemetryEvent) GetDataType() TelemetryEvent_DataType {
	if x != nil {
		return x.DataType
	}
	return TelemetryEvent_ULTRASONIC_ARRAY
}

func (x *TelemetryEvent) GetOrientation() TelemetryEvent_Orientation {
	if x != nil {
		return x.Orientation
	}
	return TelemetryEvent_FRONT
}

var File_telemetry_proto protoreflect.FileDescriptor

var file_telemetry_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x02, 0x70, 0x62, 0x22, 0xd6, 0x02, 0x0a, 0x0e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x70, 0x62, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x54,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x72,
	0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x68, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x4c, 0x54, 0x52, 0x41, 0x53, 0x4f, 0x4e, 0x49, 0x43,
	0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4c, 0x54, 0x52,
	0x41, 0x53, 0x4f, 0x4e, 0x49, 0x43, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x46, 0x52,
	0x41, 0x52, 0x45, 0x44, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x49, 0x4e, 0x46, 0x52, 0x41, 0x52, 0x45, 0x44, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4d,
	0x55, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x45, 0x52, 0x10, 0x05,
	0x22, 0x2c, 0x0a, 0x0b, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x09, 0x0a, 0x05, 0x46, 0x52, 0x4f, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x49,
	0x44, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x42, 0x04,
	0x5a, 0x02, 0x2e, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_telemetry_proto_rawDescOnce sync.Once
	file_telemetry_proto_rawDescData = file_telemetry_proto_rawDesc
)

func file_telemetry_proto_rawDescGZIP() []byte {
	file_telemetry_proto_rawDescOnce.Do(func() {
		file_telemetry_proto_rawDescData = protoimpl.X.CompressGZIP(file_telemetry_proto_rawDescData)
	})
	return file_telemetry_proto_rawDescData
}

var file_telemetry_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_telemetry_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_telemetry_proto_goTypes = []interface{}{
	(TelemetryEvent_DataType)(0),    // 0: pb.TelemetryEvent.DataType
	(TelemetryEvent_Orientation)(0), // 1: pb.TelemetryEvent.Orientation
	(*TelemetryEvent)(nil),          // 2: pb.TelemetryEvent
}
var file_telemetry_proto_depIdxs = []int32{
	0, // 0: pb.TelemetryEvent.data_type:type_name -> pb.TelemetryEvent.DataType
	1, // 1: pb.TelemetryEvent.orientation:type_name -> pb.TelemetryEvent.Orientation
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_telemetry_proto_init() }
func file_telemetry_proto_init() {
	if File_telemetry_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_telemetry_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetryEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_telemetry_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_telemetry_proto_goTypes,
		DependencyIndexes: file_telemetry_proto_depIdxs,
		EnumInfos:         file_telemetry_proto_enumTypes,
		MessageInfos:      file_telemetry_proto_msgTypes,
	}.Build()
	File_telemetry_proto = out.File
	file_telemetry_proto_rawDesc = nil
	file_telemetry_proto_goTypes = nil
	file_telemetry_proto_depIdxs = nil
}
